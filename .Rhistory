p.hat = 12/40
se0 = sqrt(0.4*(1-0.4)/40)
z = (p.hat - 0.4)/se0
p = pnorm(z)
p
p.hat = 0.550
se0 = sqrt(0.5(1-0.5)/400)
z=2
me = z*se0
p = pnorm(2)
p
p.hat = 0.550
se0 = sqrt(0.5(1-0.5)/400)
z=2
me = z*se0
p =1- pnorm(2)
p
z = 2
p.value =1- pnorm(2)
p.value
z = 1.9
p.value =1- pnorm(2)
p.value
z = 1.9
p.value =1- pnorm(z)
p.value
CI = 0.550 + c(-1,1)*2*sqrt(0.5*(1-0.5)/400)
CI = 0.550 + c(-1,1)*2*sqrt(0.5*(1-0.5)/400)
CI
CI = 0.5475 + c(-1,1)*1.90*sqrt(0.5*(1-0.5)/400)
CI
CI = 0.550 + c(-1,1)*2.00*sqrt(0.5*(1-0.5)/400)
CI
qnorm(1-0.025)
z.score = qnorm(1-0.025)
se0 = sqrt(0.5*(1-0.5)/79)
cut=0.5 + z*se0
cut
z.score = qnorm(1-0.025)
se0 = sqrt(0.55*(1-0.55)/79)
p.cut= pnorm(0.61, mean = 0.55, sd= se0)
p.cut
z.score = qnorm(1-0.025)
se0 = sqrt(0.55*(1-0.55)/79)
p.cut= pnorm(0.61, mean = 0.55, sd= se0)
1 - p.cut
z.score = qnorm(1-0.025)
se0 = sqrt(0.55*(1-0.55)/79)
p.cut= pnorm(0.61, mean = 0.55, sd= se0)
p.cut
z.score = qnorm(1-0.025)
se0 = sqrt(0.5*(1-0.5)/500)
cut=0.5 + z*se0
cut
true.se0 = sqrt(0.55*(1-0.55)/500)
p.cut= pnorm(0.54, mean = 0.55, sd= true.se0)
p.cut
true.se0 = sqrt(0.6*(1-0.6)/500)
p.cut= pnorm(0.54, mean = 0.6, sd= true.se0)
p.cut
true.se0 = sqrt(0.55*(1-0.55)/500)
p.cut= pnorm(0.61, mean = 0.55, sd= true.se0)
p.cut
true.se0 = sqrt(0.55*(1-0.55)/500)
p.cut= pnorm(0.61, mean = 0.55, sd= true.se0)
p.cut
true.se0 = sqrt(0.55*(1-0.55)/500)
p.cut= pnorm(0.54, mean = 0.55, sd= true.se0)
p.cut
z.score = qnorm(1-0.025)
se0 = sqrt(0.5*(1-0.5)/500)
cut=0.5 + z*se0
cut
true.se0 = sqrt(0.55*(1-0.55)/500)
p.cut= pnorm(0.54, mean = 0.55, sd= true.se0)
p.cut
true.se0 = sqrt(0.6*(1-0.6)/500)
p.cut= pnorm(0.54, mean = 0.6, sd= true.se0)
p.cut
boott = 10000
bootmean = matrix(NA, nrow = boott)
for(i in 1:boott){
bootsample = sample(x, replace=TRUE)
bootmean[i] = mean(bootsample)
}
hist(bootmean, xlab="Bootstrap Distribution")
lb = quantile(bootmean, 0.025)
ub = quantile(bootmean, 0.975)
c(lb, ub)
boott = 10000
bootsd = matrix(NA, nrow = boott)
for(i in 1:boott){
bootsample = sample(x, replace=TRUE)
bootsd[i] = sd(bootsample)
}
hist(bootsd, xlab="Bootstrap Distribution")
lb = quantile(bootsd, 0.025)
ub = quantile(bootsd, 0.975)
c(lb, ub)
boott = 10000
bootmean = matrix(NA, nrow = boott)
for(i in 1:boott){
bootsample = sample(x, replace=TRUE)
bootmean[i] = mean(bootsample)
}
hist(bootmean, xlab="Bootstrap Distribution")
lb = quantile(bootmean, 0.025)
ub = quantile(bootmean, 0.975)
c(lb, ub)
x = c(430,450,450,440,460,420,430,450,440)
s.mean = sum(x)/9
t.score = (s.mean - 500)/(sd(x)/sqrt(9))
t.score
p = pt(t.score)
p.value =2*p
p.value
p = pt(t.score, df = 8)
p.value =2*p
p.value
pnorm(140,121,16)
pnorm(1.19,0,1)
pnorm(1.19)
x = qnorm(0.9)
x*16 + 121
pnorm(2.5,3.41,0.55)
(1.5-3.41)/0.55
pnorm(4,3.41,0.55) - pnorm(2.5,3.41,0.55)
qnorm(3.6,3.41,0.55)
z= (3.6-3.41)/0.55
qnorm(z)
pnorm(z)
x=pnorm(z)
qnorm(x)
z
qnorm(0.96,3.41,0.55)
pnorm(2.2)
pnorm(1.11)
pnorm(84396+4000,84396,2197.5) - pnorm(84396-4000,84396,2197.5)
x=c(320,360,760,580,900,360,500,420,420,650,420,450)
s=sd(x)
s
m=mean(x)
m + c(1,-1)*1.96*s
m
t.test(x,df=12)
pnorm(-.77)
1-pnorm(0.61,0.55,sqrt(0.55*0.45)/79)
1-pnorm(0.61,0.55,sqrt(0.55*0.45)/79))
1-pnorm(0.61,0.55,sqrt((0.55*0.45)/79)))
1-pnorm(0.61,0.55,sqrt(0.55*0.45/79))
a = 0.5+1.96*sqrt(0.5*0.5/500)
1-pnorm(q,0.55,sqrt(0.55*0.45/500))
1-pnorm(a,0.55,sqrt(0.55*0.45/500))
1-pnorm(a,0.6,sqrt(0.6*0.4/500))
x=c(430,450,450,440,460,420,430,450,440)
m=mean(x)
sd(x)
q = (m-500)/sd(x)*sqrt(9)
q
tnorm()
pt(t, df=8)
pt(q, df=8)
pt(q, df=8)*2
pnorm(6.91)
pnorm(10.2)
pnorm(-10.2)
go=c(15,15,7,10,5,5,2,3,12,16,15,37,8,14,10,18,3,25,15,5,5)
no=c(6,8,15,6,5,14,10,10,12,5)
mean(go)
mean(no)
sd(go)
sd(no)
sqrt(sd(go)*sd(go)+sd(no)*sd(no))
mean(go)-mean(no)
sqrt(sd(go)*sd(go)/21+sd(no)*sd(no)/10)
2.57+c(-1,1)*2.16
t.test(go,no)
swirl()
install_from_swirl("R Programming")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
ls()
rm(lis=ls)
rm(lis=ls())
rm(list=ls())
library(swirl)
install_from_swirl("R Programming")
swirl()
1
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?as.character
?as.character()
?sapply
?as.character()
cls_vect = sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors, sum)
x<-sapply(flag_colors, sum)
class(x)
sapply(flag_colors,mean)
flags_shapes,_flags[,19:23]
flags_shapes <- flags[,19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
class(lapply(flag_shapes, range))
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals(lapply(flags,unique_vals))
unique_vals(lapply(flags,unique))
unique_vals <- lapply(flags,unique)
unique_vals
lappy(unique_vals, length())
lapply(unique_vals, length())
lapply(unique_vals, length
)
sapply(unique_val, length)
sapply(unique_vals, length)
sapply(flags,unique)
lapply(unique_vals, gunction(elem) elem[2])
hh
lapply(unique_vals, mean)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
class(tablr(flags$landmass))
class(table(flags$landmass))
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
name(plants)
names(plants)
head(plants)
head(plants,10)
tail(head,15)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1), replace = TRUE, prob = c(0.3,0.7))
sample(c(0,1), 100,replace = TRUE, prob = c(0.3,0.7))
flips = sample(c(0,1), 100,replace = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100,replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnom()
?rbinom()
?rnom
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois()
dpois(rnorm())
dpois(c(1:10))
dpois(lambda = 10)
dpois(5,lambda = 10)
rpois(5,lambda = 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
?cm
cm <- colmean(my_pois)
cm <- colMeans(my_pois)
sm
cm
hist(cm)
d1 <- Sys.Date
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3: "October 17, 1986 08:24"
t3 <-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist,y=cars$speed)
?plot
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", y="Stopping DIstance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", y="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", laby="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance", main="My Plot")
plot(x=cars$speed, y=cars$dist, main="My Plot")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
plot (cars, col = 2)
plot (cars, xlim = c(10,15))
plot(cars, pch = 2)
load(mtcars)
data(mtcars)
play()
dim(cars)
head(mtcars)
dim(mtcars)
nxt()
?boxplot
boxplot(formula(mpg~cyl), data = mtcars)
boxplot(formula=mpg~cyl, data = mtcars)
hist(mtcars$mpg)
exit()
quit()
swirtl()
swirl()
swirl()
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
ls()
rm(ls)
rm(ls())
?readLines
?readLine
?system.file
?gsub
?str_sub
#' @title Read BA Year
#' @description  Scan for the year of BA degree form text file and create a list of ages of
#' Professors.
#' @aliases read BAyear readBA
#' @param dataset Selects the year of the source text file used to create the list
#' @param year Sets the year in which the given data was collected.
#' @param upperadjuster The value of the year manually read from the text for
#'   the upper age bound.  The recommended value for \code{upperadjuster} is 2011 till
#'   2011. Then follow with the year being considered.
#' @param loweradjuster The value of the year manually read from the text for
#'   the lower age bound.  The recommended value for \code{loweradjuster} is 1940.
#' @return A list of ages of professors from the document \code{filename} adjusted with \code{upperadjuster} and
#'   \code{loweradjuster} is given as output.
#' @usage
#' readBAyear(dataset, year, upperadjuster, loweradjuster)
#' @import stringr
#Modifying text file to get the year of BA degree
#' @export
readBAyear <- function(dataset, year, upperadjuster, loweradjuster){
input <- readLines(system.file("extdata", dataset, package = "facage"), warn = FALSE)
input <- gsub("[^[:digit:]]","",input)
input <- str_sub(input, 1, 8)
#Checking for some strings with other numbers before year of BA and removing them
for(i in 1:length(input)){
if(str_sub(input[i], 1, 4) > 2016){
input[i] <- str_sub(input[i], 3, 6)
}
##Manual adjustment to remove false readings from cases when BA year is not first
else if(str_sub(input[i], 1, 4) < loweradjuster){
input[i] <- str_sub(input[i], 5, 8)
}
else if(str_sub(input[i], 1, 4) > upperadjuster & str_sub(input[i], 1, 4) < 2016){
input[i] <- str_sub(input[i], 5, 8)
}
#For cases when BA year is first
else{
input[i] <- str_sub(input[i], 1, 4)
}
}
input
#Clean up residual numbers that pass through the above construct
input <- na.omit(data.frame(BA=as.numeric(input)))
for(i in 1:dim(input)[1]){
if(input[i,1] < loweradjuster || input[i,1]==1956 || input[i,1]==1948 || input[i,1]==1955 || input[i,1]==1952 || input[i,1]==1942 || input[i,1]==1946 || input[i,1]==1941){
input[i,1] <- NA
}
}
input <- na.omit(input)
output <- data.frame(BA=input$BA, Age=year-input$BA+22)
output
}
input <- gsub("[^[:digit:]]","",input)
?test_that
swirl()
install.packages("devtools")
install.packages("roxygen")
install.packages("roxygen2")
library(devtools)
pwd
getwd()
remove.packages("wstudent")
remove.packages("devtools")
remove.packages("dplyr")
remove.packages("genderdata")
remove.packages("gender")
install.packages("devtools")
library(devtools)
install_github("pjumrustanasan/wstudent")
library(wstudent)
stat_rep("time.plot")
ratio("t0607.txt")
library(wstudent)
getHonorName("t0405.txt", "all")
str(getHonorName)
getHonorName(f_name = "t0506.txt", honor = "magna")
getFirstName("t0203.txt", type = "read.file")
stat_rep("time.plot")
?data
?data
install.packages("devtools")
library(devtools)
install_github("pjumrustanasan/wstudent", dependencies = TRUE)
library(wstudent)
getwd()
setwd("./Desktop/wstudent")
?stat_rep
?cleanData
?getHonorName
?ratio
?wstudent-datasets
document()
check()
remove.packages("wstudent")
detach("package:utils", unload=TRUE)
detach("package:stats", unload=TRUE)
remove.packages("gender")
remove.packages("genderdata")
?remove.packages
library("utils", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
remove.packages("gender")
remove.packages("genderdata")
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
install.packages("devtools")
library(devtools)
install_github("pjumrustanasan/wstudent", dependencies = TRUE)
library(wstudent)
?install.packages
install.package(devtools)
install.packages(devtools)
?capture.output
install.packages("devtools")
library(devtools)
install_github("pjumrustanasan/wstudent", dependencies = TRUE)
library(wstudent)
stat_rep("annual")
stat_rep("timeplot")
stat_rep("boxplot")
stat_rep("prop.sum")
stat_rep("t.testing")
wstudent.eight
wstudent.eight
getHonorName("t0607.txt", "sum")
getHonorName("t0607.txt", "none")
clean(getHonorName("t0607.txt", "sum"))
cleanData(getHonorName("t0607.txt", "sum"))
